/* ---------- CLASE 12 ----------- */

    Pre Procesadores CSS

        SASS es un preprocesador de css que permite escribir codigo, el cual luego se transforma en un archivo css puro
        Esto genera un codigo mas limpio y sencillo de mantener y editar, a traves de una estructura ordenada, usando un lenguaje de estilos

        
        para usar sass necesito instalar nodejs
        1. en git bash posicionado en la carpeta que voy a trabajar pongo el comando
            npm init y le doy aceptar a todo
        2. una vez aplicado el comando, en la carpeta se va a crear el archivo package.json
        3. en git bash npm install -D node-sass nodemon que instala sass en mi proyecto y controla el codigo css
        4. en el archivo package.json al final de la linea 7 agrego una , y un salto de linea para agregar la siguiente linea de codigo
            "build-css":"node-sass --include-path scss ./sass/style.scss ./css/style.css",
            "watch-css":"nodemon -e scss -x \"npm run build-css\""
        5. en la consola pongo el comando 
            npm run watch-css

    Puedo descargar prepros si no puedo usar la consola para usar SASS
        https://prepros.io/

    La manera de escribir codigo en sass es aplicando estilos a cada una de las etiquetas, siguiendo la linea de 
    codigo de html 

    ejemplo1

        .navbar{
            display: flex;
            list-style-type: none;
            li{
                a{
                    text-decoration: none;
                    &:hover{
                        color: blue;        // en caso de querer usar pseudoclases utilizo el simbolo &
                    }
                }
            }
        }

    VARIABLES ----

        ejemplo2: "mi cliente quiere que al otro dia cambie de color todo"

            sass ofrece variables
            las variables llevan el nombre de aquello que se quiera modificar

            $background: grey;
            $color: red; 

            busco en el codigo lo que quiero modificar y pongo $ con la modificacion que quiero hacer

            hay que inicializar las variables SIEMPRE al inicio

/* ---------- CLASE 13 ----------- */


    IMPORTANTE: para agregar sass a nuestro proyecto cambio el nombre de mi doc css a styles-original.css 
    para que no lo detecte el sass y lo elimine al suplantar codigo.

    Seccionar el codigo -

        si no quiero usar clases diferentes para seccionar puedo por ejemplo realizar lo siguiente
            .main-index{
                background-color: yellow;
                section{
                    h2{
                        color: red;
                        font-size: 10px;
                    }
                    &:nth-child(1){         //llamo a la etiqueta section y a todos los parrafos que correspondan al SECTION 1
                        background-color: violet;
                        p{
                            color: green; 
                        }
                    }
                }
            }

    Ordenar un bloque de codigo ya fragmentado -

        base: se incorpora todo lo que es parte del reset o estilos generales: resets, tipografias, generales
            todo se trabaja en peque√±os archivos ej: _reset.scss
        components: se agregan los componentes: carrusel ; bootstrap ; card 
        layout: se encarga de guardar todos los bloques de codigo: nav ; main ; sections ; footers ; header ; mediaQuerry (en carpetas)
        utilities: van a alojar las herramientas que ofrece sass: maps, variables, funciones, mixins 


    Como ir llamando a cada fragmento de codigo -

        -- siempre hay que llamar primero a las utilities
            1- variables
            2- mapas
            3- mixinis
            4- funcioones

            para llamarlos usamos @import "./utilities/mapas";

        -- se llaman a los archivos de base 
            @import "./base/reset" ;

        -- se llama a los archivos layout
            @import "./layout/header";
            @import "./layout/footer";

        -- se llama a los componentes 
            @import "./components/cards";


    Migracion del proyecto a sass 
        
        para poner propiedades a dos etiquetas similares puedo usar @extend .nombreDeLaClase 

        cuando trabajo con MediaQ siempre hay que ordenarlos en base a como se trabaja el proyecto; 


    Mixins 

        @mixin es un maps avanzado que tiene la estructura de una funciones

        @mixin nombre { } es para generar bloques de codigo que tengan cosas en comun con el resto de cont

        - proyecto principal @import "./utilities/mixins" ; 

        para llamar a un mixin @include nombreMixi ;




INICIAR RAPIDO SASS EN LA CONSOLA

    -----------------
    sass --watch ./   ./
    -----------------


    
