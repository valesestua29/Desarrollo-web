/* --- CLASE 8 -- GIT --- */

3 estados de GIT

1er estado (el que trabajamos)                               -> working directory
2do estado (archivos listos)                 - git add -     -> staging area
3er estado (registro de todos los archivos)  -git commit -   ->respository

$ git config --global user.name "nombre apellido"
$ git config --global user.email direccion@email.com

$git config --list 

$git config --global unset-all user.name
$git config --global unset-all user.email

COMANDOSSS ------

$ pwd           // donde estoy posicionado
$ ls            // lista de los elementos que se encuentran donde estoy posicionado
$ clear         // limpia la consola
$ ls -a         // muestra archivos ocultos
$ ls -l         // informacion adicional
$ cd nombre                 // ingresa en la carpeta nombrada
$ mkdir nombre              // crea una carpeta con ese nombre
$ touch nombre.extencion    // crea un archivo
$ cd ..                     // para salir de una carpeta
$ rm archivo.extencion      // para eliminar un archivo 
$ code nombre               // lo abre en vsc


$cd carpeta         // arrastro la carpeta donde voy a trabajar
$git init           // para iniciar el controlador de la carp
$git status         // para ver el estado de nuestro trabajo
$git add nombre     // agrega el archivo al staying area
$git rm --cached nombre.extencion   //para eliminar un archivo del staging area
$git add .          //envia todo al staging area
$git commit -m "comentario"     // 
$git log            // avisa quien hizo qué y cuando 



Ramas

principal -> master o main 

$git branch             // muestra la rama principal
$git branch nombre      // creo la rama 
$git checkout nombre    // me posiciono en la rama creada 

una vez posicionado en la rama 

$git status
$git add .
$git commit -m
$git checkout rama      

para unir dos Ramas

me posiciono en rama main
$git merge rama


/* --- CLASE 9 -- GITHUB --- */

vincular el proyecto local con GITHUB

en la pagina de GITHUB

- boton new respository
- elegimos un nombre SIN ESPACIOS
- ponemos una pequeña descripcion
- visualizarlo publico
- no agregamos el README
- no elegimos el resto de los elementos
- creamos el rep 

a tener en cuenta :
    GITHUB tiene las lineas de comando para trabajar con dicha herramienta  


git branch -M main (para que la rama master pase a ser rama MAIN)

enlazar proyecto al repositorio de git 

$ git remote add origin <pego el link del repositorio que aparece en github>
$ git push -u origin main        // empuja todos los archivos que se encuentran de manera local al repositorio 

aceptamos el "sign in with your browser"    

para ver como se ve el proyecto desde GITHUB

-settings
-columna izquierda - pages
-branch - main - save 
- se habilita una fila nueva en la columna derecha que me permite ver el link de mi pag web 

De que sirve github?
me permite ver el codigo y quien creo la linea de codigo


$ git push // me permite cargar los cambios realizados en github


si queremos trabajar en equipo
-settings
-colaboradores
-cargo el mail
-envio la invitacion 

/-------------------------------------/

trabajar sobre una rama

$ git branch rama-secundaria
$ git checkout rama-secundaria
posicionado ya en rama-secundaria
$ git add .
$ git commit -m "comentario"
$ git push -u origin rama-secundaria  


Modificar el README

nombre del proyecto
de que trata el proyecto
que se utilizo en el proyecto

utilizo editor.md en la web 
copio el bloque de codigo
lo pego en el archivo readme.md



para fusionar las dos Ramas
git merge branch rama-secundaria




